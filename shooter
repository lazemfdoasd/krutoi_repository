import random #импортирование библиотек
import pygame
from pygame import mixer
from pygame import transform 
import json
import time

pygame.mixer.init() #инициализация
pygame.mixer.music.load("space.ogg") #добавление музыки
pygame.mixer.music.play() #запуск музыки
fire = mixer.Sound('fire.ogg')

def draw_text(screen, text, size, x, y): #функиция для отрисовки текста
    font = pygame.font.SysFont('Arial', size)
    text = font.render(text, True, (255, 255, 255))
    text_rect = text.get_rect()
    text_rect.midtop = (x, y)
    screen.blit(text, text_rect)




WIDTH = 800 #размеры окна, кол-во обновлений сцены в секунду
HEIGHT = 800
FPS = 60

bg = transform.scale(pygame.image.load('galaxy.jpg'), (WIDTH, HEIGHT))


score = 0 #создание счетчиков убитых и пропущенных монстров
lost = 0

upgrade_ship = False #переключатель отвеающий за то, произошёл ли апгрейд корабля или нет

pygame.init() #инициализация пайгема
screen = pygame.display.set_mode((WIDTH, HEIGHT)) #создание экрана
pygame.display.set_caption("Шутер") #название экрана
clock = pygame.time.Clock() 


class Ship(pygame.sprite.Sprite): #класс корабля
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = transform.scale(pygame.image.load('rocket.png'),(100, 100))  
        self.rect = self.image.get_rect()
        self.rect.centerx = WIDTH / 2
        self.rect.bottom = HEIGHT - 10
        self.x = 0

    def update(self): #создание функции, отвечающей за передвижение корабля
        self.speedx = 0
        ks = pygame.key.get_pressed()
        if ks[pygame.K_LEFT]:
            self.x = -15
            self.rect.x += self.x
        if ks[pygame.K_RIGHT]:
            self.x = 15
            self.rect.x += self.x
        if self.rect.right > WIDTH:
            self.rect.right = WIDTH
        if self.rect.left < 0:
            self.rect.left = 0

    def vistrel(self): #создание функции, которая отвечает за стрельбу корабля
        if upgrade_ship == True: #если переключатель, определяющий апгрейднут ли корабль = True, то вылетают 3 пули разом, если нет то по одной
            bullet1 = Bullet(self.rect.centerx, self.rect.top)
            bullets.add(bullet1)
            bullet1.rect.y += bullet1.speed_puli
            bullet1.rect.x -= bullet1.speed_puli
            if bullet1.rect.bottom < 0:
                bullet1.kill()
        if upgrade_ship == True:
            bullet2 = Bullet(self.rect.centerx - 30, self.rect.top)
            bullets.add(bullet2)
            bullet2.rect.y += bullet2.speed_puli
            bullet2.rect.x -= bullet2.speed_puli
            if bullet2.rect.bottom < 0:
                bullet2.kill()
        if upgrade_ship == True:
            bullet3 = Bullet(self.rect.centerx + 30, self.rect.top)
            bullets.add(bullet3)
            bullet3.rect.y += bullet2.speed_puli
            bullet3.rect.x -= bullet2.speed_puli
            if bullet3.rect.bottom < 0:
                bullet3.kill()
        else:
            bullet = Bullet(self.rect.centerx, self.rect.top)
            bullets.add(bullet)
            if bullet.rect.bottom < 0:
                bullet.kill()

class Enemy(pygame.sprite.Sprite): #класс врагов
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = transform.scale(pygame.image.load('asteroid.png'),(70, 70))
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, 650)
        self.rect.y = 0
        self.speed_padenia = random.randint(1, 5)
        self.rect.y = random.randint(-100, -40)

    def update(self): #передвижение врагов
        global lost
        self.rect.y += self.speed_padenia
        if self.rect.top > HEIGHT:
            self.rect.x = random.randint(0, 60)
            self.rect.y = random.randint(-100, -40)
            self.speed_padenia = random.randint(1, 5)
            lost += 1 


class Bullet(pygame.sprite.Sprite): #класс пули
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)

        self.image = transform.scale(pygame.image.load('bullet_lazer.png'),(30, 30))

        self.rect = self.image.get_rect()
        self.rect.bottom = y
        self.rect.centerx = x
        self.speed_puli = -10





    def update(self): #передвижение пули
        self.rect.y += self.speed_puli
        if self.rect.bottom < 0:
            self.kill()

class Upgrade(pygame.sprite.Sprite): #класс спрайта который апгрейдит корабль
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.image = transform.scale(pygame.image.load('upgrade.png'),(80, 80))
        self.rect = self.image.get_rect()
    
        self.rect.x = random.randint(0, 550)
        self.rect.y = 0
        self.speed_upgrade = 5

    def update(self): #передвижение спрайта который апгрейдит корабль
        self.rect.y += self.speed_upgrade


countdown2, text2 = 10, '10'
countdown, text = 5, '30'
pygame.time.set_timer(pygame.USEREVENT, 1000)


enemies = pygame.sprite.Group() #создание всех спрайтов, фонов
bullets = pygame.sprite.Group()
all_sprites = pygame.sprite.Group()
hp = transform.scale(pygame.image.load('hp.png'),(200, 20))
hp1 = transform.scale(pygame.image.load('hp1.png'),(200, 20))
hp2 = transform.scale(pygame.image.load('hp2.png'),(200, 20))
hp3 = transform.scale(pygame.image.load('hp3.png'),(200, 20))
player = Ship()
player_g = pygame.sprite.Group()
player_g.add(player)
all_sprites.add(player)
upgradies = pygame.sprite.Group()


for i in range(5): #создание монстров
    enemy = Enemy()
    all_sprites.add(enemy)
    enemies.add(enemy)

collide = False #переключатель столкновения

running = True #переключатель отвечающий за продолжение игры

count_collide = 0 #счетчик столкновений 
perekluchatel = False
countdown_switch = False

def collide_func(): #функция с помощью которой отнимается хп
    global count_collide
    global running
    if count_collide == 2:
        if pygame.sprite.groupcollide(enemies, player_g, True, False):
            screen.blit(hp3, (player.rect.x - 45, player.rect.y - 40))
            running = False   
            enemy = Enemy()
            all_sprites.add(enemy)
            enemies.add(enemy)
        else:
            screen.blit(hp2, (player.rect.x - 45, player.rect.y - 40))
    if count_collide == 1:
        if pygame.sprite.groupcollide(enemies, player_g, True, False):
            count_collide += 1
            screen.blit(hp2, (player.rect.x - 45, player.rect.y - 40))
            enemy = Enemy()
            all_sprites.add(enemy)
            enemies.add(enemy)
        else:
            screen.blit(hp1, (player.rect.x - 45, player.rect.y - 40))
    if count_collide == 0:
        if pygame.sprite.groupcollide(enemies, player_g, True, False):
            count_collide += 1 
            enemy = Enemy()
            all_sprites.add(enemy)
            enemies.add(enemy)
            screen.blit(hp1, (player.rect.x - 45, player.rect.y - 40))
        else:
            screen.blit(hp, (player.rect.x - 45, player.rect.y - 40))
upgrade = Upgrade()
def upgrade_draw():
    if perekluchatel == True:
        upgradies.add(upgrade)
        upgradies.draw(screen)
        upgradies.update()
        
while running != False: #цикл игры
    clock.tick(FPS) #фпс

    collidies = pygame.sprite.groupcollide(player_g, upgradies, False, False)
    screen.blit(bg, (0, 0)) #отображение бекграунда

    for event in pygame.event.get(): #прописка всех ивентов (таймер, нажатия на клавиши)
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                fire.play()
                player.vistrel()
        if event.type == pygame.USEREVENT and upgrade_ship == False: 
            countdown -= 1
            text = str(countdown) 

        if event.type == pygame.USEREVENT and upgrade_ship == True: 
            countdown2 -= 1
            text2 = str(countdown2)


    if countdown == 0:
        perekluchatel = True


    if countdown == 0:
        upgrade.rect.x = random.randint(0, 550)
        upgrade.rect.y = 0
        countdown = 30
 
    upgrade_draw()

    collide_func()

    hits = pygame.sprite.groupcollide(enemies, bullets, True, True) #столкновения

    bullets.draw(screen) #отрисовка пуль 





    for collide in collidies:
        upgrade_ship = True
        upgrade.rect.y = -100000000

    bullets.update()

    for hit in hits:
        enemy = Enemy()
        all_sprites.add(enemy)
        enemies.add(enemy)
        score += 1 

    all_sprites.update()

    all_sprites.draw(screen)

    if lost == 3:
        draw_text(screen,'Вы проиграли :(', 70, WIDTH/2, HEIGHT/2-50)
        draw_text(screen,'Ваши очки:' + ' ' + str(score), 30, WIDTH/2, HEIGHT/2-100)
        
    draw_text(screen, str(score), 30, WIDTH / 2, 10)
    draw_text(screen, 'Пропущено: ' + str(lost), 30, 100, 100)
    if upgrade_ship == False:
        draw_text(screen,'До усилителя:'+ (text), 30, 600, 50)

    if upgrade_ship == True:
        draw_text(screen,'До конца усилителя:'+ (text2), 30, 600, 100)
    if countdown2 == 0:
        upgrade_ship = False
        countdown2 = 10


    if lost == 3:
        running = False

    pygame.display.flip()

